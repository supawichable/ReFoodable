rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // Anyone can read store data
    // Anyone can add a store as long as
    // they claim to be an owner in the payload
    // Only store owner can update and delete their own stores
    // store.owner_id is the id of the store owner
    match /stores/{store} {
      allow read;
      allow create: if request.auth != null && request.resource.data.owner_id == request.auth.uid;
      allow update, delete: if request.auth != null && request.auth.uid == request.resource.data.owner_id;
      
      // Anyone can read today's item data
      // Anyone can add an today's item as long as
      // they claim to be an owner in the payload
      // Only store owner and the person who added the item can 
      // update and delete the item
      // item.added_by is the id of the person who added the item
      match /todays_items/{item} {
        allow read;
        allow create: if request.auth != null && request.resource.data.added_by == request.auth.uid && exists(/databases/$(database)/documents/stores/$(store));
        allow update, delete: if request.auth != null && (request.auth.uid == request.resource.data.added_by || request.auth.uid == get(/databases/$(database)/documents/stores/$(store)).data.owner_id);
      }

      // Only store owner can read and write store items data
      // item.added_by must match store.ownerId
      match /my_items/{item} {
        allow read, write: if 
          request.auth != null &&
          exists(/databases/$(database)/documents/stores/$(store)) &&
          request.resource.data.added_by == request.auth.uid &&
          request.auth.uid == get(/databases/$(database)/documents/stores/$(store)).data.owner_id;
      }
    }

    // Anyone can read user data but on the get method only
    // You cannot query user data
    // Only the user can update and delete their own data
    // document id is the user id
    match /users_public/{user} {
      allow get;
      allow create: if request.auth != null && request.auth.uid == request.resource.id;
      allow update, delete: if request.auth != null && request.auth.uid == request.resource.id;
    }

    // Only the user can read and write their own private data
    // document id is the user id
    match /users_private/{user} {
      allow read, write: if request.auth != null && request.auth.uid == request.resource.id;
    }
  }
}
